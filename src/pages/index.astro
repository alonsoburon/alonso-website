---
import { getCollection } from 'astro:content';
import Layout from '../layouts/Layout.astro';

const posts = await getCollection('blog');
const recentPosts = posts.slice(0, 3);

function formatDate(dateString: string) {
  const date = new Date(dateString);
  return date.toLocaleDateString('en-US', {
    year: 'numeric',
    month: 'long',
    day: 'numeric'
  });
}
---

<Layout title="Alonso - Data Team Lead" description="Data Engineer and Team Lead at Datawalt. From music student to leading LATAM's best data extraction team.">
  <div class="container">
    <!-- Hero Section -->
    <section class="hero">
      <div class="hero-content">
        <h1>Data Team Lead at Datawalt</h1>
        <p class="hero-subtitle">Building LATAM's best data extraction platform</p>
        <p class="hero-description">
          Former music student who accidentally became a data engineer by helping his girlfriend with Stata homework. 
          Now leading Datawalt's first Data Engineering Cell, processing millions of records daily across LATAM. 
          Still figuring it out, but making it work.
        </p>
        <div class="hero-buttons">
          <a href="/blog" class="btn btn-primary">Read My Story</a>
          <a href="/contact" class="btn btn-secondary">Get In Touch</a>
        </div>
      </div>
    </section>

    <!-- Interactive Personal Journey -->
    <section class="pipeline-demo">
      <h2>My Journey</h2>
      <div class="pipeline-container">
        <div class="pipeline-node" data-node="music" onclick="showNodeDetails('music')">
          <div class="node-header">
            <div class="node-status status-success"></div>
            <div class="node-icon">üéµ</div>
          </div>
          <div class="node-content">
            <h3>Music Student</h3>
            <p>Composition ‚Ä¢ Piano ‚Ä¢ $15/month</p>
            <div class="node-metrics">
              <span class="metric">Struggling artist</span>
              <span class="metric">Zero prospects</span>
            </div>
          </div>
        </div>

        <div class="pipeline-connection">
          <div class="connection-line"></div>
          <div class="data-flow"></div>
        </div>

        <div class="pipeline-node" data-node="tutoring" onclick="showNodeDetails('tutoring')">
          <div class="node-header">
            <div class="node-status status-success"></div>
            <div class="node-icon">üìö</div>
          </div>
          <div class="node-content">
            <h3>Stata Tutor</h3>
            <p>Girlfriend's homework ‚Ä¢ Python ‚Ä¢ Free money</p>
            <div class="node-metrics">
              <span class="metric">Half the class</span>
              <span class="metric">Sick graphs</span>
            </div>
          </div>
        </div>

        <div class="pipeline-connection">
          <div class="connection-line"></div>
          <div class="data-flow"></div>
        </div>

        <div class="pipeline-node" data-node="intern" onclick="showNodeDetails('intern')">
          <div class="node-header">
            <div class="node-status status-success"></div>
            <div class="node-icon">üíº</div>
          </div>
          <div class="node-content">
            <h3>BI Intern</h3>
            <p>2/10 interview ‚Ä¢ ChatGPT ‚Ä¢ Hired anyway</p>
            <div class="node-metrics">
              <span class="metric">Music degree</span>
              <span class="metric">Zero experience</span>
            </div>
          </div>
        </div>

        <div class="pipeline-connection">
          <div class="connection-line"></div>
          <div class="data-flow"></div>
        </div>

        <div class="pipeline-node" data-node="lead" onclick="showNodeDetails('lead')">
          <div class="node-header">
            <div class="node-status status-success"></div>
            <div class="node-icon">üöÄ</div>
          </div>
          <div class="node-content">
            <h3>Team Lead</h3>
            <p>Datawalt ‚Ä¢ LATAM ‚Ä¢ Millions of records</p>
            <div class="node-metrics">
              <span class="metric">First data cell</span>
              <span class="metric">Still figuring it out</span>
            </div>
          </div>
        </div>
      </div>

      <div class="pipeline-details" id="nodeDetails">
        <div class="details-content">
          <h3 id="detailsTitle">Click a node to see details</h3>
          <p id="detailsDescription">Select any stage of my journey to see what actually happened.</p>
        </div>
      </div>
    </section>

    <!-- Skills Pipeline Section -->
    <section class="pipeline-demo">
      <h2>Who I Am Today</h2>
      <div class="pipeline-container">
        <div class="pipeline-node" data-node="data-engineering" onclick="showSkillDetails('data-engineering')">
          <div class="node-header">
            <div class="node-status status-success"></div>
            <div class="node-icon">‚ö°</div>
          </div>
          <div class="node-content">
            <h3>Data Engineering</h3>
            <p>Python ‚Ä¢ ETL ‚Ä¢ Automation</p>
            <div class="node-metrics">
              <span class="metric">Expert Level</span>
              <span class="metric">Enterprise Platforms</span>
            </div>
          </div>
        </div>

        <div class="pipeline-connection">
          <div class="connection-line"></div>
          <div class="data-flow"></div>
        </div>

        <div class="pipeline-node" data-node="team-leadership" onclick="showSkillDetails('team-leadership')">
          <div class="node-header">
            <div class="node-status status-success"></div>
            <div class="node-icon">üë•</div>
          </div>
          <div class="node-content">
            <h3>Team Leadership</h3>
            <p>Management ‚Ä¢ Mentoring ‚Ä¢ Strategy</p>
            <div class="node-metrics">
              <span class="metric">Advanced Level</span>
              <span class="metric">Data Engineering Cell</span>
            </div>
          </div>
        </div>

        <div class="pipeline-connection">
          <div class="connection-line"></div>
          <div class="data-flow"></div>
        </div>

        <div class="pipeline-node" data-node="business-intelligence" onclick="showSkillDetails('business-intelligence')">
          <div class="node-header">
            <div class="node-status status-success"></div>
            <div class="node-icon">üìä</div>
          </div>
          <div class="node-content">
            <h3>Business Intelligence</h3>
            <p>Power BI ‚Ä¢ Dashboards ‚Ä¢ Analytics</p>
            <div class="node-metrics">
              <span class="metric">Expert Level</span>
              <span class="metric">LATAM Clients</span>
            </div>
          </div>
        </div>

        <div class="pipeline-connection">
          <div class="connection-line"></div>
          <div class="data-flow"></div>
        </div>

        <div class="pipeline-node" data-node="data-architecture" onclick="showSkillDetails('data-architecture')">
          <div class="node-header">
            <div class="node-status status-success"></div>
            <div class="node-icon">üèóÔ∏è</div>
          </div>
          <div class="node-content">
            <h3>Data Architecture</h3>
            <p>PostgreSQL ‚Ä¢ Warehousing ‚Ä¢ Scalability</p>
            <div class="node-metrics">
              <span class="metric">Advanced Level</span>
              <span class="metric">Warp Platform</span>
            </div>
          </div>
        </div>

        <div class="pipeline-connection">
          <div class="connection-line"></div>
          <div class="data-flow"></div>
        </div>

        <div class="pipeline-node" data-node="problem-solving" onclick="showSkillDetails('problem-solving')">
          <div class="node-header">
            <div class="node-status status-success"></div>
            <div class="node-icon">üß©</div>
          </div>
          <div class="node-content">
            <h3>Problem Solving</h3>
            <p>Analytics ‚Ä¢ Debugging ‚Ä¢ Innovation</p>
            <div class="node-metrics">
              <span class="metric">Expert Level</span>
              <span class="metric">Music Background</span>
            </div>
          </div>
        </div>

        <div class="pipeline-connection">
          <div class="connection-line"></div>
          <div class="data-flow"></div>
        </div>

        <div class="pipeline-node" data-node="communication" onclick="showSkillDetails('communication')">
          <div class="node-header">
            <div class="node-status status-success"></div>
            <div class="node-icon">üí¨</div>
          </div>
          <div class="node-content">
            <h3>Communication</h3>
            <p>Teaching ‚Ä¢ Presenting ‚Ä¢ Collaboration</p>
            <div class="node-metrics">
              <span class="metric">Advanced Level</span>
              <span class="metric">Tutoring Experience</span>
            </div>
          </div>
        </div>
      </div>

      <div class="pipeline-details" id="skillDetails">
        <div class="details-content">
          <h3 id="skillTitle">Click a skill to see how I developed it</h3>
          <p id="skillDescription">Each skill tells a story of growth, from music student to data team lead.</p>
        </div>
      </div>
    </section>

    <!-- Recent Posts -->
    <section class="recent-posts">
      <h2>Latest Articles</h2>
      <div class="posts-grid">
        {recentPosts.map((post) => (
          <article class="post-card">
            <h3><a href={`/blog/${post.slug}`}>{post.data.title}</a></h3>
            <p class="post-meta">{formatDate(post.data.date)}</p>
            <p>{post.data.description || 'Article about data engineering and analysis.'}</p>
          </article>
        ))}
      </div>
      <div class="text-center">
        <a href="/blog" class="btn btn-outline">View All Articles</a>
      </div>
    </section>
  </div>

  <style>
    /* Hero Section */
    .hero {
      text-align: center;
      padding: 4rem 0;
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      color: white;
      margin: -2rem 0 4rem 0;
      border-radius: 0 0 0 0;
    }

    .hero-content {
      max-width: 800px;
      margin: 0 auto;
      padding: 0 1rem;
    }

    .hero h1 {
      font-size: 3.5rem;
      font-weight: 700;
      margin-bottom: 1rem;
    }

    .hero-subtitle {
      font-size: 1.5rem;
      font-weight: 300;
      margin-bottom: 1rem;
      opacity: 0.9;
    }

    .hero-description {
      font-size: 1.1rem;
      margin-bottom: 2rem;
      opacity: 0.8;
      line-height: 1.7;
    }

    .hero-buttons {
      display: flex;
      gap: 1rem;
      justify-content: center;
      flex-wrap: wrap;
    }

    /* Buttons */
    .btn {
      display: inline-block;
      padding: 0.75rem 1.5rem;
      border-radius: 0.5rem;
      text-decoration: none;
      font-weight: 600;
      transition: all 0.3s;
      border: 2px solid transparent;
    }

    .btn-primary {
      background: white;
      color: #667eea;
    }

    .btn-primary:hover {
      background: #f8f9fa;
      transform: translateY(-2px);
    }

    .btn-secondary {
      background: transparent;
      color: white;
      border-color: white;
    }

    .btn-secondary:hover {
      background: white;
      color: #667eea;
    }

    .btn-outline {
      background: transparent;
      color: #58a6ff;
      border-color: #58a6ff;
    }

    .btn-outline:hover {
      background: #58a6ff;
      color: white;
    }

    /* Sections */
    section {
      margin-bottom: 4rem;
    }

    h2 {
      font-size: 2.5rem;
      font-weight: 700;
      text-align: center;
      margin-bottom: 3rem;
      color: #f0f6fc;
    }

    /* Interactive Personal Journey Section */
    .pipeline-demo {
      padding: 4rem 0;
      background: linear-gradient(135deg, #0f172a 0%, #1e293b 50%, #0f172a 100%);
      color: white;
      position: relative;
      overflow: visible;
    }

    .pipeline-demo::before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background: radial-gradient(circle at 20% 50%, rgba(88, 166, 255, 0.1) 0%, transparent 50%),
                  radial-gradient(circle at 80% 20%, rgba(16, 185, 129, 0.1) 0%, transparent 50%),
                  radial-gradient(circle at 40% 80%, rgba(139, 92, 246, 0.1) 0%, transparent 50%);
      pointer-events: none;
    }

    .pipeline-demo h2 {
      text-align: center;
      font-size: 2.5rem;
      font-weight: 700;
      color: #f1f5f9;
      margin-bottom: 3rem;
      position: relative;
      z-index: 1;
    }

    .pipeline-container {
      display: flex;
      align-items: center;
      justify-content: center;
      gap: 1rem;
      max-width: 1400px;
      margin: 0 auto 3rem;
      padding: 0 1rem;
      position: relative;
      z-index: 0;
      overflow: visible;
    }

    .pipeline-node {
      background: linear-gradient(145deg, #1e293b 0%, #334155 100%);
      border: 2px solid #475569;
      border-radius: 16px;
      padding: 1.5rem;
      width: 280px;
      transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
      cursor: pointer;
      position: relative;
      overflow: hidden;
      flex-shrink: 0;
      backdrop-filter: blur(10px);
      box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);
      z-index: 1;
    }

    .pipeline-node::before {
      content: '';
      position: absolute;
      top: 0;
      left: -100%;
      width: 100%;
      height: 100%;
      background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.1), transparent);
      transition: left 0.6s ease;
    }

    .pipeline-node:hover::before {
      left: 100%;
    }

    .pipeline-node:hover {
      border-color: #58a6ff;
      box-shadow: 0 12px 40px rgba(88, 166, 255, 0.3), 0 0 0 1px rgba(88, 166, 255, 0.2);
      transform: translateY(-8px) scale(1.02);
    }

    .pipeline-node.active {
      border-color: #10b981;
      box-shadow: 0 12px 40px rgba(16, 185, 129, 0.4), 0 0 0 1px rgba(16, 185, 129, 0.3);
      transform: translateY(-4px) scale(1.01);
    }

    .node-header {
      display: flex;
      align-items: center;
      gap: 0.75rem;
      margin-bottom: 1rem;
    }

    .node-status {
      width: 12px;
      height: 12px;
      border-radius: 50%;
      animation: pulse 2s infinite;
      position: relative;
    }

    .node-status::after {
      content: '';
      position: absolute;
      top: -2px;
      left: -2px;
      right: -2px;
      bottom: -2px;
      border-radius: 50%;
      background: inherit;
      opacity: 0.3;
      animation: ripple 2s infinite;
    }

    .status-success {
      background: #10b981;
      box-shadow: 0 0 15px rgba(16, 185, 129, 0.6);
    }

    .node-icon {
      font-size: 1.8rem;
      filter: drop-shadow(0 2px 4px rgba(0, 0, 0, 0.3));
      transition: transform 0.3s ease;
    }

    .pipeline-node:hover .node-icon {
      transform: scale(1.1) rotate(5deg);
    }

    .node-content h3 {
      font-size: 1.2rem;
      font-weight: 600;
      color: #f1f5f9;
      margin-bottom: 0.5rem;
      text-shadow: 0 1px 2px rgba(0, 0, 0, 0.3);
    }

    .node-content p {
      color: #94a3b8;
      font-size: 0.9rem;
      margin-bottom: 1rem;
      line-height: 1.4;
    }

    .node-metrics {
      display: flex;
      flex-direction: column;
      gap: 0.4rem;
    }

    .metric {
      background: linear-gradient(135deg, #334155 0%, #475569 100%);
      color: #10b981;
      padding: 0.4rem 0.6rem;
      border-radius: 8px;
      font-size: 0.75rem;
      font-weight: 500;
      text-align: center;
      border: 1px solid rgba(16, 185, 129, 0.2);
      transition: all 0.3s ease;
    }

    .metric:hover {
      background: linear-gradient(135deg, #10b981 0%, #059669 100%);
      color: white;
      transform: translateY(-1px);
    }

    .pipeline-connection {
      display: flex;
      align-items: center;
      position: relative;
      width: 80px;
      height: 6px;
      flex-shrink: 0;
      z-index: -2;
    }

    .connection-line {
      width: 400px;
      height: 3px;
      background: linear-gradient(90deg, #334155 0%, #475569 50%, #334155 100%);
      position: absolute;
      border-radius: 2px;
      overflow: hidden;
      left: -160px;
    }

    .connection-line::before {
      content: '';
      position: absolute;
      top: 0;
      left: -100%;
      width: 100%;
      height: 100%;
      background: linear-gradient(90deg, transparent, rgba(88, 166, 255, 0.6), transparent);
      animation: shimmer 2s infinite;
    }

    .data-flow {
      position: absolute;
      width: 10px;
      height: 10px;
      background: radial-gradient(circle, #10b981 0%, #059669 100%);
      border-radius: 50%;
      animation: flow 3s linear infinite;
      box-shadow: 0 0 15px rgba(16, 185, 129, 0.8), 0 0 30px rgba(16, 185, 129, 0.4);
      border: 2px solid rgba(255, 255, 255, 0.2);
      opacity: 0;
    }

    .pipeline-details {
      background: linear-gradient(145deg, #1e293b 0%, #334155 100%);
      border: 1px solid #475569;
      border-radius: 16px;
      padding: 2.5rem;
      max-width: 800px;
      margin: 0 auto;
      backdrop-filter: blur(10px);
      box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);
      transition: all 0.3s ease;
    }

    .pipeline-details:hover {
      border-color: #58a6ff;
      box-shadow: 0 12px 40px rgba(88, 166, 255, 0.2);
    }

    .details-content h3 {
      color: #f1f5f9;
      font-size: 1.6rem;
      font-weight: 600;
      margin-bottom: 1rem;
      text-shadow: 0 1px 2px rgba(0, 0, 0, 0.3);
    }

    .details-content p {
      color: #94a3b8;
      line-height: 1.7;
      font-size: 1rem;
    }

    @keyframes pulse {
      0%, 100% { opacity: 1; }
      50% { opacity: 0.5; }
    }

    @keyframes ripple {
      0% { transform: scale(1); opacity: 0.3; }
      100% { transform: scale(2); opacity: 0; }
    }

    @keyframes flow {
      0% { 
        left: -15px; 
        opacity: 0; 
      }
      10% { 
        opacity: 1; 
      }
      90% { 
        opacity: 1; 
      }
      100% { 
        left: calc(100% + 15px); 
        opacity: 0; 
      }
    }

    @keyframes shimmer {
      0% { left: -100%; }
      100% { left: 100%; }
    }

    /* Responsive */
    @media (max-width: 1200px) {
      .pipeline-container {
        flex-wrap: wrap;
        gap: 1.5rem;
        justify-content: center;
      }
      
      .pipeline-node {
        width: calc(50% - 0.75rem);
        min-width: 280px;
        max-width: 320px;
      }
      
      .pipeline-connection {
        width: 100%;
        height: 40px;
        transform: rotate(90deg);
      }
      
      .connection-line {
        height: 4px;
      }

    }

    @media (max-width: 768px) {
      .pipeline-demo {
        padding: 3rem 0;
      }
      
      .pipeline-demo h2 {
        font-size: 2rem;
        margin-bottom: 2rem;
      }
      
      .pipeline-container {
        flex-direction: column;
        gap: 2rem;
        padding: 0 0.5rem;
      }
      
      .pipeline-node {
        width: 100%;
        max-width: 350px;
        margin: 0 auto;
        padding: 1.25rem;
      }
      
      .pipeline-connection {
        transform: rotate(90deg);
        width: 6px;
        height: 50px;
      }
      
      .connection-line {
        height: 4px;
      }
      
      .pipeline-details {
        padding: 2rem;
        margin: 0 1rem;
      }
      
      .details-content h3 {
        font-size: 1.4rem;
      }

    }

    @media (max-width: 480px) {
      .pipeline-node {
        padding: 1rem;
      }
      
      .node-content h3 {
        font-size: 1.1rem;
      }
      
      .node-content p {
        font-size: 0.85rem;
      }
      
      .metric {
        font-size: 0.7rem;
        padding: 0.3rem 0.5rem;
      }

    }


    /* Recent Posts */
    .posts-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
      gap: 2rem;
      margin-bottom: 2rem;
    }

    .post-card {
      background: #161b22;
      padding: 2rem;
      border-radius: 1rem;
      box-shadow: 0 4px 6px rgba(0,0,0,0.3);
      border: 1px solid #21262d;
      transition: transform 0.3s, box-shadow 0.3s;
    }

    .post-card:hover {
      transform: translateY(-4px);
      box-shadow: 0 8px 25px rgba(0,0,0,0.4);
      border-color: #58a6ff;
    }

    .post-card h3 {
      font-size: 1.25rem;
      font-weight: 600;
      margin-bottom: 0.5rem;
    }

    .post-card h3 a {
      color: #f0f6fc;
      text-decoration: none;
    }

    .post-card h3 a:hover {
      color: #58a6ff;
    }

    .post-meta {
      color: #8b949e;
      font-size: 0.875rem;
      margin-bottom: 1rem;
    }

    .text-center {
      text-align: center;
    }

    /* Responsive */
    @media (max-width: 768px) {
      .hero h1 {
        font-size: 2.5rem;
      }

      .hero-subtitle {
        font-size: 1.25rem;
      }

      .hero-buttons {
        flex-direction: column;
        align-items: center;
      }

      .timeline::before {
        left: 1rem;
      }

      .timeline-item {
        padding-left: 3rem;
      }

      .timeline-marker {
        left: 0.25rem;
      }

      .posts-grid {
        grid-template-columns: 1fr;
      }
    }
  </style>

  <script is:inline>
    const nodeDetails = {
      music: {
        title: "Music Student",
        description: "I was studying Music Composition, writing scores for student films and piss-poor videogame developers while earning a magnificent average of 15 bucks a month. Living under my mom's roof with zero job prospects and no idea what I wanted to do with my life. The future looked bleak, to say the least."
      },
      tutoring: {
        title: "Stata Tutor",
        description: "My girlfriend was losing her mind over her Econometrics class and Stata software. I grabbed a pirated copy of Stata MP and started helping her with homework. Before I knew it, I was tutoring half the class, teaching them Python and making sick graphs with ggplot2. It felt like free money compared to music gigs."
      },
      intern: {
        title: "BI Intern",
        description: "I applied to Datawalt with a music degree and zero experience. The interview was hilarious - they asked about my hobbies and video games. The skill test was a disaster: I got 2/10 questions right. I took it home, hammered it out with ChatGPT, and sent it back three hours later. They hired me anyway."
      },
      lead: {
        title: "Team Lead",
        description: "Within a year, I was leading Datawalt's first Data Engineering Cell, processing millions of records daily across LATAM. I built Warp, our custom data platform, and demonstrated a scalability-first mindset that caught the C-suite's attention. Still figuring it out, but making it work."
      }
    };

    const skillDetails = {
      'data-engineering': {
        title: "Data Engineering",
        description: "Started with simple Python scripts to help students cheat on homework, now building enterprise-grade data platforms. I learned by doing - from Stata automation to custom ETL engines. The key was always thinking about scalability first, not just solving the immediate problem. That mindset got me promoted to team lead."
      },
      'team-leadership': {
        title: "Team Leadership", 
        description: "Never planned to lead anyone, but here I am managing Datawalt's first Data Engineering Cell. The hardest part isn't the technical stuff - it's managing brilliant, complicated people. I learned that giving problems (not solutions) and creating safety nets works better than micromanaging. Still figuring it out, but the team trusts me."
      },
      'business-intelligence': {
        title: "Business Intelligence",
        description: "From making sick graphs with ggplot2 to building Power BI dashboards for LATAM clients. I discovered that the best BI isn't about fancy visuals - it's about making data accessible to people who need it. My tutoring background taught me to explain complex concepts simply, which is exactly what good BI requires."
      },
      'data-architecture': {
        title: "Data Architecture",
        description: "Built Warp, our custom data platform, from scratch. The challenge wasn't just technical - it was convincing everyone that homogenizing data in a warehouse was essential for scaling. I learned that good architecture solves business problems, not just technical ones. PostgreSQL, data warehousing, and thinking 10x bigger than the current need."
      },
      'problem-solving': {
        title: "Problem Solving",
        description: "My music background taught me to break complex compositions into manageable parts. Same approach works for data problems - start with the end goal, work backwards, and don't overcomplicate things. The best solutions are often the simplest ones that actually work. ChatGPT helps, but the real skill is asking the right questions."
      },
      'communication': {
        title: "Communication",
        description: "Tutoring half the economics class taught me that technical skills mean nothing if you can't explain them. I learned to translate complex data concepts into business value, present to C-suite executives, and mentor team members. The key is listening first, then speaking in their language - whether that's Python, SQL, or plain English."
      }
    };

    function showNodeDetails(nodeId) {
      console.log('Clicked node:', nodeId);
      
      // Remove active class from all nodes
      document.querySelectorAll('.pipeline-node').forEach(node => {
        node.classList.remove('active');
      });
      
      // Add active class to clicked node
      const clickedNode = document.querySelector(`[data-node="${nodeId}"]`);
      if (clickedNode) {
        clickedNode.classList.add('active');
        console.log('Added active class to node');
      }
      
      // Update details
      const details = nodeDetails[nodeId];
      if (details) {
        const titleElement = document.getElementById('detailsTitle');
        const descriptionElement = document.getElementById('detailsDescription');
        if (titleElement) {
          titleElement.textContent = details.title;
          console.log('Updated title:', details.title);
        }
        if (descriptionElement) {
          descriptionElement.textContent = details.description;
          console.log('Updated description');
        }
      }
    }

    function showSkillDetails(skillId) {
      console.log('Clicked skill:', skillId);
      
      // Remove active class from all skill nodes
      document.querySelectorAll('.skill-node').forEach(node => {
        node.classList.remove('active');
      });
      
      // Add active class to clicked skill node
      const clickedSkill = document.querySelector(`[data-skill="${skillId}"]`);
      if (clickedSkill) {
        clickedSkill.classList.add('active');
        console.log('Added active class to skill');
      }
      
      // Update skill details
      const details = skillDetails[skillId];
      if (details) {
        const titleElement = document.getElementById('skillTitle');
        const descriptionElement = document.getElementById('skillDescription');
        if (titleElement) {
          titleElement.textContent = details.title;
          console.log('Updated skill title:', details.title);
        }
        if (descriptionElement) {
          descriptionElement.textContent = details.description;
          console.log('Updated skill description');
        }
      }
    }

    // Make functions globally available
    window.showNodeDetails = showNodeDetails;
    window.showSkillDetails = showSkillDetails;

    // Add some random status changes for realism
    setInterval(() => {
      const nodes = document.querySelectorAll('.pipeline-node');
      nodes.forEach(node => {
        if (Math.random() < 0.1) { // 10% chance
          const status = node.querySelector('.node-status');
          if (status) {
            status.style.animation = 'none';
            setTimeout(() => {
              status.style.animation = 'pulse 2s infinite';
            }, 100);
          }
        }
      });
    }, 5000);
  </script>
</Layout>
